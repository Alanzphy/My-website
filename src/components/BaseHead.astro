---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { SITE_TITLE } from '../consts';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import type { ImageMetadata } from 'astro';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff2" as="font" type="font/woff2" crossorigin />

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };

  const getFontPreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('font')) {
      return localStorage.getItem('font');
    }
    return 'default'; // 'default' or 'comic-sans'
  };

  const applyTheme = (theme) => {
    if (theme === 'dark') {
      document.documentElement.classList.add('theme-dark');
    } else {
      document.documentElement.classList.remove('theme-dark');
    }
    document.documentElement.setAttribute('data-theme', theme);
  };

  const applyFont = (font) => {
    if (font === 'comic-sans') {
      document.documentElement.classList.add('font-accessibility');
    } else {
      document.documentElement.classList.remove('font-accessibility');
    }
    document.documentElement.setAttribute('data-font', font);
  };

  // Apply initial theme and font on load
  const initialTheme = getThemePreference();
  applyTheme(initialTheme);

  const initialFont = getFontPreference();
  applyFont(initialFont);

  // Functions to be called by buttons
  window.toggleTheme = () => {
    const currentTheme = document.documentElement.classList.contains('theme-dark') ? 'dark' : 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    localStorage.setItem('theme', newTheme);
    applyTheme(newTheme);
  };

  window.toggleFont = () => {
    const currentFont = document.documentElement.classList.contains('font-accessibility') ? 'comic-sans' : 'default';
    const newFont = currentFont === 'comic-sans' ? 'default' : 'comic-sans';
    localStorage.setItem('font', newFont);
    applyFont(newFont);
  };
</script>

<!-- View Transitions -->
<meta name="view-transition" content="same-origin" />

<!-- Prefetching -->
<link rel="preload" href={new URL(image.src, Astro.url)} as="image" />
